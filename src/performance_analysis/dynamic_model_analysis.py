import pandas as pd

def compute_network_performance(final_df):
    """
    Computes network performance metrics including network availability and data throughput.

    Args:
    - final_df (pd.DataFrame): The final DataFrame containing simulation results with columns such as:
      - 'time': Timestamps of the data points.
      - 'data_rate_bps': Data rate in bits per second at each timestamp.
      - 'network_available': Boolean column indicating if the network was available at each timestamp.

    Returns:
    - dict: A dictionary containing network availability (%) and total network data throughput (bps).
    """
    
    # Calculate total number of time steps (or data points)
    total_time_steps = len(final_df)
    
    # Calculate the number of time steps where the network was available
    available_time_steps = final_df['network_available'].sum()
    
    # Calculate Network Availability as a percentage
    network_availability = (available_time_steps / total_time_steps) * 100
    
    # Calculate total network data throughput by summing up data rates where the network was available
    total_data_throughput = final_df.loc[final_df['network_available'], 'data_rate_bps'].sum()
    
    # Return the computed metrics as a dictionary
    performance_metrics = {
        'Network Availability (%)': network_availability,
        'Total Network Data Throughput (bps)': total_data_throughput
    }
    
    return performance_metrics

if __name__ == "__main__":
    # Load the final DataFrame generated by the pipeline creation script
    final_df = pd.read_csv('final_network_data.csv')

    # Compute network performance
    performance_metrics = compute_network_performance(final_df)

    # Display the results
    print("Network Performance Analysis:")
    print(f"Network Availability: {performance_metrics['Network Availability (%)']:.2f}%")
    print(f"Total Network Data Throughput: {performance_metrics['Total Network Data Throughput (bps)']:.2f} bps")
